// src/components/StudentDashboard.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';

function StudentDashboard() {
    const [books, setBooks] = useState([]);
    const [filteredBooks, setFilteredBooks] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [expandedBookId, setExpandedBookId] = useState(null);

    const fetchBooks = async () => {
        try {
            const response = await axios.get('http://localhost:5000/api/books');
            setBooks(response.data);
            setFilteredBooks(response.data);
        } catch (err) {
            setError('Failed to load books. Please try again later.');
            console.error('Error:', err);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => { fetchBooks(); }, []);

    useEffect(() => {
        const lowercasedSearchTerm = searchTerm.toLowerCase();
        const results = books.filter(book =>
            book.title.toLowerCase().includes(lowercasedSearchTerm) ||
            book.author.toLowerCase().includes(lowercasedSearchTerm) ||
            book.isbn.toLowerCase().includes(lowercasedSearchTerm) ||
            (book.description && book.description.toLowerCase().includes(lowercasedSearchTerm)) ||
            (searchTerm && book.shelf_number && book.shelf_number.toString().includes(lowercasedSearchTerm)) ||
            (searchTerm && book.row_position && book.row_position.toString().includes(lowercasedSearchTerm))
        );
        setFilteredBooks(results);
        setExpandedBookId(searchTerm ? 'search' : null);
    }, [searchTerm, books]);

    const toggleBookExpansion = (bookId) => {
        setExpandedBookId(expandedBookId === bookId ? null : bookId);
    };

    if (loading) return <div style={{ textAlign: 'center', padding: '50px' }}>Loading books...</div>;
    if (error) return <div style={{ textAlign: 'center', color: 'red' }}>{error}</div>;

    return (
        <div style={{ padding: '20px', maxWidth: '1200px', margin: '0 auto' }}>
            <h2 style={{ textAlign: 'center' }}>Library Books</h2>
            <p style={{ textAlign: 'center' }}>Click on a book to see its location</p>
            
            <div style={{ margin: '20px 0', textAlign: 'center' }}>
                <input
                    type="text"
                    placeholder="Search books..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    style={{ padding: '10px', width: '300px', maxWidth: '100%' }}
                />
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(250px, 1fr))', gap: '20px' }}>
                {filteredBooks.map(book => {
                    const isExpanded = expandedBookId === book.id || expandedBookId === 'search';
                    return (
                        <div 
                            key={book.id}
                            onClick={() => toggleBookExpansion(book.id)}
                            style={{
                                border: '1px solid #ddd',
                                borderRadius: '8px',
                                padding: '15px',
                                cursor: 'pointer',
                                backgroundColor: isExpanded ? '#f9f9f9' : '#fff',
                                transition: 'all 0.2s'
                            }}
                        >
                            <h3 style={{ marginTop: 0 }}>{book.title}</h3>
                            <p>By: {book.author}</p>
                            
                            {isExpanded && (
                                <div style={{ marginTop: '10px', paddingTop: '10px', borderTop: '1px solid #eee' }}>
                                    <p>ISBN: {book.isbn}</p>
                                    {book.shelf_number && <p>Shelf: {book.shelf_number}</p>}
                                    {book.row_position && <p>Row: {book.row_position}</p>}
                                    {book.description && <p>{book.description}</p>}
                                </div>
                            )}
                        </div>
                    );
                })}
            </div>
        </div>
    );
}

export default StudentDashboard;
